[{"judul":"Timer","isi":" label, input { display: block; } input { width: 100%; padding: 10px; box-sizing: border-box; }  Timer Berapa Menit?    menit  \n new Vue({ el: \".vue\", delimiters: [\"\"], data: { waktu: \"\", sisa: \"\" }, methods: { mulaiHitung(){ this.sisa = this.waktu this.waktu = \"\" setInterval(this.interval, 60000) }, interval(){ if (this.sisa != 0){ this.sisa -= 1 console.log(this.sisa) } } } })  ","link":"https://belajarpemrograman.my.id/timer/"},{"judul":"Deteksi Jumlah Kata Di Editor Blogspot","isi":"Buka dashboard Blogspot, terus klik Buat Postingan Baru, atau bisa juga klik postingan yang mau diedit. Maka, akan muncul tampilan editor postingan baru yang sudah familiar:\nKemudian, reload halaman.\nTerus, pencet Ctrl Shift i. Maka, akan muncul DevTools:\nItu munculnya di bagian bawah ya.\nKlik Console:\nMasukkan kode berikut ini ke situ:\nfunction tampilKata(){ let banyak = document.querySelector(\u0026#39;iframe.editable\u0026#39;).contentDocument.body.innerText.split(\u0026#39; \u0026#39;).length banyak = banyak.toLocaleString(\u0026#39;id\u0026#39;) document.title = `${banyak}kata` } tampilKata() document.querySelector(\u0026#39;iframe.editable\u0026#39;).contentDocument.body.addEventListener(\u0026#39;keyup\u0026#39;, () =\u0026gt; { tampilKata() }) Pencet Enter.\nKalau sudah, kamu bisa menyembunyikan lagi DevTools-nya dengan cara pencet tanda silang di kanan atas DevTools, atau bisa juga dengan memencet Ctrl Shift i.\nNah sekarang, kamu bisa melihat hasilnya di tab browser:\n","link":"https://belajarpemrograman.my.id/deteksi-jumlah-kata-di-editor-blogspot/"},{"judul":"Membuat Fitur Pencarian Di Hugo","isi":"Menu pencarian di suatu blog adalah fitur yang sangat penting. Karena, fitur pencarian akan membuat pengunjung akan betah di blog kita, nggak lari ke mana-mana. Soalnya kan kalau bisa dicari di blog ini, buat apa dicari di tempat lain kan ya? Apalagi kalau blog kita itu laju, nggak pakai loading. Bisa karena kita menerapkan Single Page Application atau menggunakan Turbolinks untuk Multiple Page Application seperti di blog ini.\nNah, sekarang kita akan membuat fitur pencarian di Hugo. Hugo adalah salah satu Static Site Generator yang cukup terkenal selain Jekyll. Yang membuat Hugo terkenal adalah karena dibuat dengan bahasa pemrograman Go yang laju sehingga compile halaman Markdown menjadi HTML pun lebih cepat. Juga, Hugo mendukung Fast Render yang mirip kayak Hot Module Reload di bundler. Sehingga, tidak perlu meng-compile semua halaman untuk mendapatkan update HTML dari Markdown yang sedang kita edit. Jadi, cuma file-file tertentu saja yang di-update di sisi server Hugo.\nLogika Program Logika dalam membuat fitur pencarian ini adalah seperti ini:\n Kumpulkan semua postingan (judul, isi, link) dalam satu file JSON (situs.com/posts/index.json) Buat satu halaman untuk pencarian (situs.com/cari) Di halaman pencarian itu, kita buat program untuk mendapatkan file JSON lalu mecocokkannya sesuai dengan kata kunci yang kita cari  Sekarang kita mulai buat programnya.\nMulai Coding Pertama, kita setting dulu di config.toml untuk mengaktifkan templating di JSON:\n[outputs] section = [\u0026#34;html\u0026#34;, \u0026#34;rss\u0026#34;, \u0026#34;json\u0026#34;] Kemudian, kita buat template JSON di layouts/_default/list.json.json yang isinya:\n[ {{ range $index, $e := .Data.Pages }} {{ if $index }}, {{ end }} { \u0026#34;judul\u0026#34;: {{ .Title | jsonify }}, \u0026#34;isi\u0026#34;: {{ .Plain | jsonify }}, \u0026#34;link\u0026#34; : {{ .Permalink | jsonify }} } {{ end }} ] Jadinya:\n[ { \u0026#34;judul\u0026#34;: \u0026#34;Cari\u0026#34;, \u0026#34;isi\u0026#34;: \u0026#34; .cari { width: 100%; padding: .5rem; box-sizing: border-box; } Halo Halo Halo -- document.querySelector(\\\u0026#34;.formCari\\\u0026#34;).addEventListener(\\\u0026#34;submit\\\u0026#34;, (x) = { x.preventDefault() async function mulaiCari(){ let hasil = await fetch(\u0026#39;/posts/index.json\u0026#39;).then(x = x.json()) hasil = await hasil let yangDicari = document.querySelector(\u0026#39;.cari\u0026#39;).value.toLowerCase() hasil.map(x = { x.judulKecil = x.judul.toLowerCase() x.isiKecil = x.isi.toLowerCase() }) hasil = hasil.sort((x, y) = x.judul y.judul) let ketemu = [] for (let y of hasil){ if (y.judulKecil.includes(yangDicari) || y.isiKecil.includes(yangDicari)) { ketemu = [...ketemu, y] } } if (ketemu.length 0) { document.querySelector(\u0026#39;.hasil ol\u0026#39;).innerHTML = ketemu.map(x = `${x.judul}`).join(\u0026#39;\u0026#39;) } else { document.querySelector(\u0026#39;.hasil ol\u0026#39;).innerHTML = ` Nggak Ketemu ` } } mulaiCari() }) \u0026#34;, \u0026#34;link\u0026#34; : \u0026#34;http://localhost:1313/cari/\u0026#34; } , { \u0026#34;judul\u0026#34;: \u0026#34;Mengapa Perlu Membuat Blog Khusus Pemrograman\u0026#34;, \u0026#34;isi\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;link\u0026#34; : \u0026#34;http://localhost:1313/mengapa-perlu-membuat-blog-khusus-pemrograman/\u0026#34; } , { \u0026#34;judul\u0026#34;: \u0026#34;Tentang Penulis\u0026#34;, \u0026#34;isi\u0026#34;: \u0026#34;Penulis blog ini adalah Zen yang merupakan seorang mahasiswa Psikologi angkatan 2015 di Universitas Mulawarman. Dan lulus pada tahun 2020 dengan nilai lumayan lah walaupun nggak bisa sempurna. Soalnya menurutku, nilai yang baik itu harus yang sempurna, tanpa satupun kesalahan.\\nBlog ini aku dedikasikan untuk membagikan pengetahuan seputar pemrograman, mulai dari yang paling sederhana hingga yang tingkat rumit. Jadi, aku nggak khusus membahas yang sederhana semua atau yang rumit semua. Ya tergantung mood lah pengen nulis tentang apa.\\nDarimana aku belajar tentang pemrograman? Diawali dari kesukaanku akan segala hal yang berbau hacking pada waktu SMP, juga karena diajari cara membuat blog di Blogspot oleh Ustadz Reza. Maka, aku pun mulai tertarik dengan dunia pemrograman. Waktu itu aku sering beli buku-buku Jasakom, terutama yang ngoprek Windows dan tentang jaringan. Dua topik itu sekarang sudah jarang banget sih aku gali karena aku sekarang pakai Linux dan nggak main tentang jaringan lagi.\\n\u0026#34;, \u0026#34;link\u0026#34; : \u0026#34;http://localhost:1313/tentang-penulis/\u0026#34; } , { \u0026#34;judul\u0026#34;: \u0026#34;Sikap Yang Sebaiknya Dimiliki Programmer\u0026#34;, \u0026#34;isi\u0026#34;: \u0026#34;Pantang Menyerah Nggak Mudah Mengeluh Tetap Diam Selalu Update Pengetahuan \u0026#34;, \u0026#34;link\u0026#34; : \u0026#34;http://localhost:1313/sikap-yang-sebaiknya-dimiliki-programmer/\u0026#34; } ] Kemudian kita buat shortcode supaya bisa menyisipkan HTML di dalam postingan. Nah, tuliskan kode berikut di layouts/shortcodes/html.html:\n{{ .Inner }} Baru kita buat postingan baru dengan perintah:\nhugo new posts/cari.md Maka akan terbentuk content/posts/cari.md. Nah, kemudian kita edit dan diisi dengan:\n--- title: \u0026#34;Cari\u0026#34; date: 2020-12-09T09:38:59Z draft: false description: Cari apa? tags: - --- {{\u0026lt;html\u0026gt;}} \u0026lt;style\u0026gt; .cari { width: 100%; padding: .5rem; box-sizing: border-box; } \u0026lt;/style\u0026gt; \u0026lt;form class=\u0026#34;formCari\u0026#34;\u0026gt; \u0026lt;input class=\u0026#34;cari\u0026#34; placeholder=\u0026#34;Cari apa?\u0026#34; required\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;div class=\u0026#34;hasil\u0026#34;\u0026gt; \u0026lt;ol\u0026gt; \u0026lt;!-- \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;/\u0026#34;\u0026gt;Halo\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;/\u0026#34;\u0026gt;Halo\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;/\u0026#34;\u0026gt;Halo\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; --\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; document.querySelector(\u0026#34;.formCari\u0026#34;).addEventListener(\u0026#34;submit\u0026#34;, (x) =\u0026gt; { x.preventDefault() async function mulaiCari(){ let hasil = await fetch(\u0026#39;/posts/index.json\u0026#39;).then(x =\u0026gt; x.json()) hasil = await hasil let yangDicari = document.querySelector(\u0026#39;.cari\u0026#39;).value.toLowerCase() hasil.map(x =\u0026gt; { x.judulKecil = x.judul.toLowerCase() x.isiKecil = x.isi.toLowerCase() }) hasil = hasil.sort((x, y) =\u0026gt; x.judul \u0026gt; y.judul) let ketemu = [] for (let y of hasil){ if (y.judulKecil.includes(yangDicari) || y.isiKecil.includes(yangDicari)) { ketemu = [...ketemu, y] } } if (ketemu.length \u0026gt; 0) { document.querySelector(\u0026#39;.hasil ol\u0026#39;).innerHTML = ketemu.map(x =\u0026gt; `\u0026lt;li\u0026gt;\u0026lt;a href=\u0026#39;${x.link}\u0026#39;\u0026gt;${x.judul}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;`).join(\u0026#39;\u0026#39;) } else { document.querySelector(\u0026#39;.hasil ol\u0026#39;).innerHTML = ` \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#39;/cari\u0026#39;\u0026gt;Nggak Ketemu\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; ` } } mulaiCari() }) \u0026lt;/script\u0026gt; {{\u0026lt;/html\u0026gt;}} Pada script di atas, aku menggunakan sedikit teknik JavaScript untuk mempermudah aku mengaplikasikan logika yang telah kususun sebelumnya. Di situ, aku nggak menggunakan framework JavaScript seperti Vue dan Angular JS, library JavaScript seperti React dan Alpine JS, juga nggak menggunakan compiler JavaScript seperti Svelte.\nKenapa sih aku mesti repot-repot menggunakan Vanilla JS dibandingkan menggunakan framework JavaScript yang sudah terkenal? Ya karena mau sederhana aja sih. Nggak ribet-ribet fungsinya. Cuma untuk mendapatkan data JSON, mengolahnya, lalu menampilkannya. Nah, sekarang coba deh kita bahas.\nPembahasan Program Pertama, aku menggunakan addEventListener untuk mendapatkan event submit dari form. Kenapa sih aku nggak menggunakan attribute onsubmit? Karena aku ingin menghadirkan preventDefault yang nggak bisa jalan kalau di onsubmit.\nNah, kodenya itu seperti ini plus dengan preventDefault:\ndocument.querySelector(\u0026#34;.formCari\u0026#34;).addEventListener(\u0026#34;submit\u0026#34;, (x) =\u0026gt; { x.preventDefault() }) Lalu, aku menggunakan async/await untuk melakukan fetch ke file JSON yang telah kita buat tadi. Secara umum, teknik async/await untuk fetch itu seperti ini:\nasync function jalankanFetch(){ let datanya = await fetch(\u0026#39;http://situs.com/data.json\u0026#39;).then(x =\u0026gt; x.json()) datanya = await datanya console.log(datanya) } jalankanFetch() Logika fetch dengan async/await tampak pada kode bagian ini:\nasync function mulaiCari(){ let hasil = await fetch(\u0026#39;/posts/index.json\u0026#39;).then(x =\u0026gt; x.json()) hasil = await hasil // dst } mulaiCari() Maka, hasil dari /posts/index.json disimpan pada variabel hasil.\nLalu, kita buat variabel yangDicari yang isinya adalah kata kunci yang kita cari, lalu dikecilkan hurufnya (lowercase):\nlet yangDicari = document.querySelector(\u0026#39;.cari\u0026#39;).value.toLowerCase() Terus, yang hasil tadi, kita buat key baru bernama judulKecil yang merupakan nilai dari key judul yang dikecilkan. Dan juga, kita membuat key isiKecil yang merupakan nilai dari isi yang dikecilkan. Lalu, semua nilai dari hasil, kita urutkan berdasarkan key judul:\nhasil.map(x =\u0026gt; { x.judulKecil = x.judul.toLowerCase() x.isiKecil = x.isi.toLowerCase() }) hasil = hasil.sort((x, y) =\u0026gt; x.judul \u0026gt; y.judul) Kemudian, kita buat variabel ketemu yang akan menampung semua nilai yang cocok dengan kata kunci:\nlet ketemu = [] Lalu, kita cocok-cocokkan deh. Kalau sesuai, masukkan ke array ketemu:\nfor (let y of hasil){ if (y.judulKecil.includes(yangDicari) || y.isiKecil.includes(yangDicari)) { ketemu = [...ketemu, y] } } Kemudian, kita tampilkan hasilnya:\nif (ketemu.length \u0026gt; 0) { document.querySelector(\u0026#39;.hasil ol\u0026#39;).innerHTML = ketemu.map(x =\u0026gt; `\u0026lt;li\u0026gt;\u0026lt;a href=\u0026#39;${x.link}\u0026#39;\u0026gt;${x.judul}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;`).join(\u0026#39;\u0026#39;) } else { document.querySelector(\u0026#39;.hasil ol\u0026#39;).innerHTML = ` \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#39;/cari\u0026#39;\u0026gt;Nggak Ketemu\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; ` } ","link":"https://belajarpemrograman.my.id/membuat-fitur-pencarian-di-hugo/"},{"judul":"Cari","isi":"  .cari { width: 100%; padding: .5rem; box-sizing: border-box; }    Halo Halo Halo --    document.querySelector(\".formCari\").addEventListener(\"submit\", (x) = { x.preventDefault() async function mulaiCari(){ let hasil = await fetch('/posts/index.json').then(x = x.json()) hasil = await hasil let yangDicari = document.querySelector('.cari').value.toLowerCase() hasil.map(x = { x.judulKecil = x.judul.toLowerCase() x.isiKecil = x.isi.toLowerCase() }) hasil = hasil.sort((x, y) = x.judul  y.judul) let ketemu = [] for (let y of hasil){ if (y.judulKecil.includes(yangDicari) || y.isiKecil.includes(yangDicari)) { ketemu = [...ketemu, y] } } if (ketemu.length  0) { document.querySelector('.hasil ol').innerHTML = ketemu.map(x = `${x.judul}`).join('') } else { document.querySelector('.hasil ol').innerHTML = ` Nggak Ketemu ` } } mulaiCari() })  ","link":"https://belajarpemrograman.my.id/cari/"},{"judul":"Tentang Penulis","isi":"Penulis blog ini adalah Zen yang merupakan seorang mahasiswa Psikologi angkatan 2015 di Universitas Mulawarman. Dan lulus pada tahun 2020 dengan nilai lumayan lah walaupun nggak bisa sempurna. Soalnya menurutku, nilai yang baik itu harus yang sempurna, tanpa satupun kesalahan.\nBlog ini aku dedikasikan untuk membagikan pengetahuan seputar pemrograman, mulai dari yang paling sederhana hingga yang tingkat rumit. Jadi, aku nggak khusus membahas yang sederhana semua atau yang rumit semua. Ya tergantung mood lah pengen nulis tentang apa.\nDarimana aku belajar tentang pemrograman? Diawali dari kesukaanku akan segala hal yang berbau hacking pada waktu SMP, juga karena diajari cara membuat blog di Blogspot oleh Ustadz Reza. Maka, aku pun mulai tertarik dengan dunia pemrograman. Waktu itu aku sering beli buku-buku Jasakom, terutama yang ngoprek Windows dan tentang jaringan. Dua topik itu sekarang sudah jarang banget sih aku gali karena aku sekarang pakai Linux dan nggak main tentang jaringan lagi.\n","link":"https://belajarpemrograman.my.id/tentang-penulis/"}]